{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\scart\\\\Top5Lists_HW4\\\\Top5Lists_HW4\\\\client\\\\src\\\\auth\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState } from \"react\";\nimport { useHistory } from 'react-router-dom';\nimport api from '../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconsole.log(\"create AuthContext: \" + AuthContext); // THESE ARE ALL THE TYPES OF UPDATES TO OUR AUTH STATE THAT CAN BE PROCESSED\n\nexport const AuthActionType = {\n  GET_LOGGED_IN: \"GET_LOGGED_IN\",\n  REGISTER_USER: \"REGISTER_USER\",\n  LOGIN_USER: \"LOGIN_USER\",\n  LOGOUT_USER: \"LOGOUT_USER\"\n};\n\nfunction AuthContextProvider(props) {\n  _s();\n\n  const [auth, setAuth] = useState({\n    user: null,\n    loggedIn: false\n  });\n  const history = useHistory();\n  useEffect(() => {\n    auth.getLoggedIn().catch(err => {});\n  }, []);\n\n  const authReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      case AuthActionType.GET_LOGGED_IN:\n        {\n          return setAuth({\n            user: payload.user,\n            loggedIn: payload.loggedIn\n          });\n        }\n\n      case AuthActionType.REGISTER_USER:\n        {\n          return setAuth({\n            user: payload.user,\n            loggedIn: true\n          });\n        }\n\n      case AuthActionType.LOGIN_USER:\n        {\n          return setAuth({\n            user: payload.user,\n            loggedIn: payload.loggedIn\n          });\n        }\n\n      case AuthActionType.LOGOUT_USER:\n        {\n          return setAuth({\n            user: null,\n            loggedIn: false\n          });\n        }\n\n      default:\n        return auth;\n    }\n  };\n\n  auth.getLoggedIn = async function () {\n    const response = await api.getLoggedIn();\n\n    if (response.status === 200) {\n      authReducer({\n        type: AuthActionType.SET_LOGGED_IN,\n        payload: {\n          loggedIn: response.data.loggedIn,\n          user: response.data.user\n        }\n      });\n    }\n  };\n\n  auth.logoutUser = async function () {\n    // const response = await api.logoutUser();\n    // if (response.status === 200) {\n    authReducer({\n      type: AuthActionType.LOGOUT_USER,\n      payload: {}\n    });\n    localStorage.clear();\n    history.push(\"/\");\n    store.currentList = null; // }\n  };\n\n  auth.registerUser = async function (userData, store) {\n    const response = await api.registerUser(userData);\n\n    if (response.status === 200) {\n      authReducer({\n        type: AuthActionType.REGISTER_USER,\n        payload: {\n          user: response.data.user\n        }\n      });\n      history.push(\"/\");\n      store.loadIdNamePairs();\n    }\n  };\n\n  auth.loginUser = async function (userData, store) {\n    const response = await api.loginUser(userData);\n\n    if (response.status === 200) {\n      authReducer({\n        type: AuthActionType.LOGIN_USER,\n        payload: {\n          user: response.data.user,\n          loggedIn: true\n        }\n      });\n      history.push(\"/\");\n      store.loadIdNamePairs();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      auth\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AuthContextProvider, \"NFINwiyv/qU4uWyw/gIk49CAqBM=\", false, function () {\n  return [useHistory];\n});\n\n_c = AuthContextProvider;\nexport default AuthContext;\nexport { AuthContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"sources":["C:/Users/scart/Top5Lists_HW4/Top5Lists_HW4/client/src/auth/index.js"],"names":["React","createContext","useEffect","useState","useHistory","api","AuthContext","console","log","AuthActionType","GET_LOGGED_IN","REGISTER_USER","LOGIN_USER","LOGOUT_USER","AuthContextProvider","props","auth","setAuth","user","loggedIn","history","getLoggedIn","catch","err","authReducer","action","type","payload","response","status","SET_LOGGED_IN","data","logoutUser","localStorage","clear","push","store","currentList","registerUser","userData","loadIdNamePairs","loginUser","children"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from 'react-router-dom'\r\nimport api from '../api'\r\n\r\nconst AuthContext = createContext();\r\nconsole.log(\"create AuthContext: \" + AuthContext);\r\n\r\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR AUTH STATE THAT CAN BE PROCESSED\r\nexport const AuthActionType = {\r\n    GET_LOGGED_IN: \"GET_LOGGED_IN\",\r\n    REGISTER_USER: \"REGISTER_USER\",\r\n    LOGIN_USER: \"LOGIN_USER\",\r\n    LOGOUT_USER: \"LOGOUT_USER\"\r\n}\r\n\r\nfunction AuthContextProvider(props) {\r\n    const [auth, setAuth] = useState({\r\n        user: null,\r\n        loggedIn: false\r\n    });\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        auth.getLoggedIn().catch(err => {\r\n\r\n        });\r\n    }, []);\r\n\r\n    const authReducer = (action) => {\r\n        const { type, payload } = action;\r\n        switch (type) {\r\n            case AuthActionType.GET_LOGGED_IN: {\r\n                return setAuth({\r\n                    user: payload.user,\r\n                    loggedIn: payload.loggedIn\r\n                });\r\n            }\r\n            case AuthActionType.REGISTER_USER: {\r\n                return setAuth({\r\n                    user: payload.user,\r\n                    loggedIn: true\r\n                })\r\n            }\r\n            case AuthActionType.LOGIN_USER: {\r\n                return setAuth({\r\n                    user: payload.user,\r\n                    loggedIn: payload.loggedIn\r\n                })\r\n            }\r\n            case AuthActionType.LOGOUT_USER: {\r\n                return setAuth({\r\n                    user: null,\r\n                    loggedIn: false\r\n                })\r\n            }\r\n            default:\r\n                return auth;\r\n        }\r\n    }\r\n\r\n    auth.getLoggedIn = async function () {\r\n        const response = await api.getLoggedIn();\r\n        if (response.status === 200) {\r\n            authReducer({\r\n                type: AuthActionType.SET_LOGGED_IN,\r\n                payload: {\r\n                    loggedIn: response.data.loggedIn,\r\n                    user: response.data.user\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    auth.logoutUser = async function () {\r\n        // const response = await api.logoutUser();\r\n        // if (response.status === 200) {\r\n            authReducer({\r\n                type: AuthActionType.LOGOUT_USER,\r\n                payload:{}\r\n            })\r\n            localStorage.clear();\r\n            history.push(\"/\");\r\n            store.currentList = null;\r\n        // }\r\n    }\r\n\r\n    auth.registerUser = async function(userData, store) {\r\n        const response = await api.registerUser(userData);      \r\n        if (response.status === 200) {\r\n            authReducer({\r\n                type: AuthActionType.REGISTER_USER,\r\n                payload: {\r\n                    user: response.data.user\r\n                }\r\n            })\r\n            history.push(\"/\");\r\n            store.loadIdNamePairs();\r\n        }\r\n    }\r\n    auth.loginUser = async function(userData, store) {\r\n        const response = await api.loginUser(userData);\r\n        if (response.status === 200) {\r\n            authReducer({\r\n                type: AuthActionType.LOGIN_USER,\r\n                payload: {\r\n                    user: response.data.user,\r\n                    loggedIn: true\r\n                }\r\n            })\r\n            history.push(\"/\");\r\n            store.loadIdNamePairs();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider value={{\r\n            auth\r\n        }}>\r\n            {props.children}\r\n        </AuthContext.Provider>\r\n    );\r\n}\r\n\r\nexport default AuthContext;\r\nexport { AuthContextProvider };"]},"metadata":{},"sourceType":"module"}